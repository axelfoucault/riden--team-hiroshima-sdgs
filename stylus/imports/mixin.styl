use('../plugins/has-own-property.js')

_unit-base-px(value)
  return value if auto is value or typeof(value) is literal and match('^calc', value)
  return unit(value, 'px') if unit(value) is ''
  value

// ==========================================================================
// size
// ==========================================================================
//サイズ指定
size(width, height = width)
  width _unit-base-px(width)
  height _unit-base-px(height)

//画像のサイズを取得する
//@example
//----------
//get-img-size('../../htdocs/images/sample.png')  // image
//get-img-size('images/sample/a.png')  // sprite
//----------
get-img-size(imgpath)
  if match('^.+(htdocs).+$', imgpath)
    img-size = image-size(imgpath)
    return {
      width : img-size[0]
      height: img-size[1]
    }
  else
    return {
      width : sprite-hash[imgpath].width
      height: sprite-hash[imgpath].height
    }

// ==========================================================================
// centering
// ==========================================================================
//コンテンツを上下左右センタリング
//@example
//----------
//centering()  // translate
//centering(500px)  // margin
//centering(500px, 200px)  // margin
// ----------
centering(width = null, height = width)
  if width
    margin (width / -2)px 0 0 (width / -2)px
  else
    transform translateX(-50%) translateY(-50%)
  absolute top 50% left 50%

//コンテンツをセンタリング
container-centering(width, base-width = null)
  position relative
  if base-width
    width percentage(width / base-width)
  else
    width _unit-base-px(width)
  margin-right auto
  margin-left auto

// ==========================================================================
// sprite
// ==========================================================================
//スプライト画像
//@example
//----------
//sprites('button/logo.png')  // hover 無し
//sprites('button/logo', '-hover', '.png')  // hover 有り
//sprites('button/logo', '-hover', '.png', '&.is-located')  // hover & selector 有り
//----------
sprites(path, suffix = false, extension = false, selector = false)
  if !suffix and !extension
    sprite sprite-path + path
  if suffix
    sprite sprite-path + path + extension
    if selector
      &:hover, {selector}
        sprite sprite-path + path + suffix + extension
    else
      &:hover
        sprite sprite-path + path + suffix + extension

//スプライト画像のホバーアニメーション（フェード）
//@example
//----------
//sprite-fade-hover('sample/a')
//sprite-fade-hover('sample/a', {
//  duration: .5, crossFade: true, suffixBefore: '_off', suffixAfter: '_on'
//})
//----------
sprite-fade-hover(image, opts = {})
  default-opts = {
    duration    : .2
    crossFade   : false
    suffixBefore: '-off'
    suffixAfter : '-on'
  }
  opts = merge(default-opts, opts)
  image-size = get-img-size(sprite-path + image + opts.suffixBefore + '.png')
  width : (image-size.width)px
  height: (image-size.height)px
  position relative
  animation: delayView (opts.duration)s linear
  &::before, &::after
    content ''
    display block
    absolute top 0 left 0
  &::before
    sprite(sprite-path + image + opts.suffixBefore + '.png')
    if opts.crossFade
      animation: fadeIn (opts.duration)s linear
  &::after
    opacity 0
    sprite(sprite-path + image + opts.suffixAfter + '.png')
    animation: fadeOut (opts.duration)s linear
  &:hover
    if opts.crossFade
      &::before
        opacity 0
        animation: fadeOut (opts.duration)s linear
    &::after
      opacity 1
      animation: fadeIn (opts.duration)s linear

// ==========================================================================
// text
// ==========================================================================
//10pxより小さいfont-size指定（chrome対策）
small-text(size)
  display inline-block
  transform scale(size)
  transform-origin 0 0

//文字置換
text-replace()
  text-indent 100%
  text-decoration none
  white-space nowrap
  overflow hidden

//2行目以降を一文字下げる
second-line-indent(width)
  padding-left width
  text-indent -1 * width

// ==========================================================================
// background
// ==========================================================================
//背景画像指定
//@example
//----------
//bg-img("aaa.jpg", left, top, no-repeat, #fff)
//----------
bg-img(file-name, position-x = left, position-y = top, repeat-type = null, bg-color = null, bg-size = false)
  background url((image-path) + file-name) position-x position-y repeat-type bg-color
  if bg-size
    background-size bg-size

//背景画像指定（複数）
//@example
//----------
//bg-img-multiple({
//  '1': "aaa.jpg" (left top) no-repeat
//  '2': "bbb.jpg" (left top) no-repeat #fff
//}, {
//  '1': (50px 100px)
//  '2': (50px 100px)
//})
//----------
bg-img-multiple(imagesHash, sizesHash = false)
  images = null
  for i, props in imagesHash
    for prop, j in props
      if j is 0
        if i is 1
          images = images url((image-path) + prop)
        else
          images = images, url((image-path) + prop)
      else
        if prop
          images = images prop
  background images
  if sizesHash
    sizes = null
    for i, prop in sizesHash
      if prop
        if i is 1
          sizes = sizes prop
        else
          sizes = sizes, prop
    background-size sizes

// ==========================================================================
// mediaquery
// ==========================================================================
media(device)
  if device == 'pc'
    @media only screen and (min-width:(size-sp + 1)px)
      {block}
  if device == 'pc-small'
    @media only screen and (min-width: (size-sp + 1)px) and (max-width: (size-pc)px)
      {block}
  if device == 'sp'
    @media only screen and (max-width: (size-sp)px)
      {block}
  if device == 'sp-small'
    @media (max-width: (size-sp / 2)px)
      {block}

// ==========================================================================
// others
// ==========================================================================
//アスペクト比を固定したままリサイズ（IE8以上）
//@example
//----------
//aspect-ratio-kept-container('../../htdocs/images/sample.png')  // image
//aspect-ratio-kept-container('images/sample/a.png')  // sprite
//aspect-ratio-kept-container(500, 300)  // size
// ----------
aspect-ratio-kept-container(width-or-imgpath, height = null)
  if typeof(width-or-imgpath) is 'string'
    img-size = get-img-size(width-or-imgpath)
    width  = img-size.width
    height = img-size.height
  else
    width = width-or-imgpath
  width 100%
  position relative
  &::before
    content ""
    display block
    padding-top (height / width * 100)%
  > *
    position absolute

// ==========================================================================
// nib override
// ==========================================================================
opacity(val)
  opacity val

clearfix()
  +cache('clearfix')
    &::after
      content ""
      display block
      clear both

border-radius(vals...)
  border-radius vals

box-sizing(val)
  box-sizing val

box-shadow()
  box-shadow arguments

background-size(vals...)
  background-size vals

transform(vals...)
  if support-android4
    -webkit-transform vals
  transform vals

transform-origin(vals...)
  if support-android4
    -webkit-transform-origin vals
  transform-origin vals

transform-style(val)
  if support-android4
    -webkit-transform-style val
  transform-style val

backface-visibility(val)
  if support-android4
    -webkit-backface-visibility val
  backface-visibility val

perspective(val)
  if support-android4
    -webkit-perspective val
  perspective val

perspective-origin(vals...)
  if support-android4
    -webkit-perspective-origin vals
  perspective-origin vals

transition(vals...)
  if support-android4
    -webkit-transition vals
  transition vals

transition-property(vals...)
  if support-android4
    -webkit-transition-property vals
  transition-property vals

transition-duration(vals...)
  if support-android4
    -webkit-transition-duration vals
  transition-duration vals

transition-property(vals...)
  if support-android4
    -webkit-transition-property vals
  transition-property vals

transition-timing-function(vals...)
  if support-android4
    -webkit-transition-timing-function vals
  transition-timing-function vals

animation(vals...)
  if support-android4
    -webkit-animation vals
  animation vals

animation-name(vals...)
  if support-android4
    -webkit-animation-name vals
  animation-name vals

animation-duration(vals...)
  if support-android4
    -webkit-animation-duration vals
  animation-duration vals

animation-timing-function(vals...)
  if support-android4
    -webkit-animation-timing-function vals
  animation-timing-function vals

animation-delay(vals...)
  if support-android4
    -webkit-animation-delay vals
  animation-delay vals

animation-iteration-count(vals...)
  if support-android4
    -webkit-animation-iteration-count vals
  animation-iteration-count vals

animation-direction(vals...)
  if support-android4
    -webkit-animation-direction vals
  animation-direction vals

animation-fill-mode(vals...)
  if support-android4
    -webkit-animation-fill-mode vals
  animation-fill-mode vals

animation-play-state(vals...)
  if support-android4
    -webkit-animation-play-state vals
  animation-play-state vals
